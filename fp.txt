
PoshCode/New-Password 1.1.ps1
Script 69


Param (
   [string]$Template = "************"
)

BEGIN {
   [char[]]$UpperAlpha = 'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'
   [char[]]$LowerAlpha = 'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'
   [char[]]$UpperConsonants = 'B','C','D','F','G','H','J','K','L','M','N','P','Q','R','S','T','V','W','X','Y','Z'
   [char[]]$LowerConsonants = 'b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z'
   [char[]]$LowerVowels = 'a','e','i','o','u' 
   [char[]]$UpperVowels = 'A','E','I','O','U' 
   [char[]]$Numeric = '1','2','3','4','5','6','7','8','9','0'
   [char[]]$UpperHex = '1','2','3','4','5','6','7','8','9','0','A','B','C','D','E','F'
   [char[]]$LowerHex = '1','2','3','4','5','6','7','8','9','0','a','b','c','d','e','f'
   [char[]]$Punctuation = '!','#','$','%','''','(',')','*','+',',','-','.','/',':',';','=','>','?','@','[',']','^','_' 
   
   $script:RANDOM = new-object Random
   function rand { 
      begin { $list = @() }
      process { $list += $_ }
      end { 
         $list[$RANDOM.Next(0,$list.Count-1)] 
      }
   }
}
PROCESS {
   if($_) { $Template = $_ }
   Write-Verbose "Template: $Template"
   $password = ""
   $randoms = @()
   for($c = 0; $c -lt $Template.Length; $c++) {
      switch -CaseSensitive ($Template[$c])
      {
         'l' { # Make this character a Lowercase Alpha
            $password += $LowerAlpha | rand
            break
         }
         'L' { # Make this character a Uppercase Alpha
            $password += $UpperAlpha | rand
            break
         } 
         'l' { # Make this character a Lowercase Alpha
            $password += $LowerAlpha | rand
            break
         }
         'C' { # Make this character a Uppercase consonant
            $password += $UpperConsonants | rand
            break
         }
         'c' { # Make this character a Lowercase consonant
            $password += $LowerConsonants | rand
            break
         }
         'V' { # Make this character a Uppercase vowel
            $password += $UpperVowels | rand
            break
         }
         'v' { # Make this character a Lowercase vowel
            $password += $LowerVowels | rand
            break
         }
         'H' { # Make this character a Uppercase vowel
            $password += $UpperHex | rand
            break
         }
         'h' { # Make this character a Lowercase vowel
            $password += $LowerHex | rand
            break
         }
         '.' { # Make this character punctuation
            $password += $Punctuation | rand
            break
         }
         'd' { # Make this character numeric
            $password += $Numeric | rand
            break
         }
         'a' { # Make this character any alphabetic
            $password += $UpperAlpha + $LowerAlpha  | rand
            break
         }          
         'A' { # Make this character any alphanumeric
            $password += $UpperAlpha + $LowerAlpha + $Numeric | rand
            break
         } 
         '*' { # Make this character any character
            $password += $UpperAlpha + $LowerAlpha + $Numeric + $Punctuation | rand
            break
         }
         { [bool](([string]$_) -as [int]) } { 
            if($randoms -notcontains $c) {
               $randoms += $c
               [int]$count = $(0..([int][string]$_) | rand)
            } else { 
               [int]$count = $(([int][string]$_) - 1)
            }
            if($c -gt 0 -and $count -gt 0) { 
               $Template = $Template.Remove($c,1).Insert($c,$count)
               $c -= 2 
               Write-Verbose "ALTER Template: $Template  Active: $($Template[$c]) ($c), Generating $count ($_)  Password: $password"
            }
            break
         }
         '\\' {
            $password += $Template[(++$c)]
            break
         }
         default {
            $password += $Template[$c]
            break
         }
      }
   }
   return $Password
}
IseSteroids/PowerShellGallery/Vaporshell/0.7.3/Public/Resource Types/New-VSWorkSpacesWorkspace.ps1
Script 421
function New-VSWorkSpacesWorkspace {
    [OutputType('Vaporshell.Resource.WorkSpaces.Workspace')]
    [cmdletbinding()]
    Param
    (
        [parameter(Mandatory = $true,Position = 0)]
        [ValidateScript( {
                if ($_ -match "^[a-zA-Z0-9]*$") {
                    $true
                }
                else {
                    throw 'The logical ID must be alphanumeric (a-z, A-Z, 0-9) and unique within the template.'
                }
            })]
        [System.String]
        $LogicalId,
        [parameter(Mandatory = $true)]
        [ValidateScript( {
                $allowedTypes = "System.String","Vaporshell.Function"
                if ([string]$($_.PSTypeNames) -match "($(($allowedTypes|ForEach-Object{[RegEx]::Escape($_)}) -join '|'))") {
                    $true
                }
                else {
                    throw "This parameter only accepts the following types: $($allowedTypes -join ", "). The current types of the value are: $($_.PSTypeNames -join ", ")."
                }
            })]
        $BundleId,
        [parameter(Mandatory = $true)]
        [ValidateScript( {
                $allowedTypes = "System.String","Vaporshell.Function"
                if ([string]$($_.PSTypeNames) -match "($(($allowedTypes|ForEach-Object{[RegEx]::Escape($_)}) -join '|'))") {
                    $true
                }
                else {
                    throw "This parameter only accepts the following types: $($allowedTypes -join ", "). The current types of the value are: $($_.PSTypeNames -join ", ")."
                }
            })]
        $DirectoryId,
        [parameter(Mandatory = $false)]
        [System.Boolean]
        $RootVolumeEncryptionEnabled,
        [parameter(Mandatory = $true)]
        [ValidateScript( {
                $allowedTypes = "System.String","Vaporshell.Function"
                if ([string]$($_.PSTypeNames) -match "($(($allowedTypes|ForEach-Object{[RegEx]::Escape($_)}) -join '|'))") {
                    $true
                }
                else {
                    throw "This parameter only accepts the following types: $($allowedTypes -join ", "). The current types of the value are: $($_.PSTypeNames -join ", ")."
                }
            })]
        $UserName,
        [parameter(Mandatory = $false)]
        [System.Boolean]
        $UserVolumeEncryptionEnabled,
        [parameter(Mandatory = $false)]
        [ValidateScript( {
                $allowedTypes = "System.String","Vaporshell.Function"
                if ([string]$($_.PSTypeNames) -match "($(($allowedTypes|ForEach-Object{[RegEx]::Escape($_)}) -join '|'))") {
                    $true
                }
                else {
                    throw "This parameter only accepts the following types: $($allowedTypes -join ", "). The current types of the value are: $($_.PSTypeNames -join ", ")."
                }
            })]
        $VolumeEncryptionKey,
        [ValidateSet("Delete","Retain","Snapshot")]
        [System.String]
        $DeletionPolicy,
        [parameter(Mandatory = $false)]
        [System.String[]]
        $DependsOn,
        [parameter(Mandatory = $false)]
        [System.Management.Automation.PSCustomObject]
        $Metadata,
        [parameter(Mandatory = $false)]
        [ValidateScript( {
                $allowedTypes = "Vaporshell.Resource.UpdatePolicy"
                if ([string]$($_.PSTypeNames) -match "($(($allowedTypes|ForEach-Object{[RegEx]::Escape($_)}) -join '|'))") {
                    $true
                }
                else {
                    throw "This parameter only accepts the following types: $($allowedTypes -join ", "). The current types of the value are: $($_.PSTypeNames -join ", ")."
                }
            })]
        $UpdatePolicy,
        [parameter(Mandatory = $false)]
        $Condition
    )
    Begin {
        $ResourceParams = @{
            LogicalId = $LogicalId
            Type = "AWS::WorkSpaces::Workspace"
        }
    }
    Process {
        foreach ($key in $PSBoundParameters.Keys) {
            swi
GithubGist/ao-zkn_67d0b6d831be22efc996_raw_c7d6a8d983929942456b00376ec4552eac96ef28_Write-Log.ps1
Script 1189
function Write-DebugLog([String]$VALUE){
  if($LogLevel-le 0){
    Out-LogFile -LogFilePath $LogFilePath -Value $Value -LogType 0 -LogEncoding $LogEncoding
  }
}
 
function Write-InfoLog([String]$VALUE){
  if($LogLevel -le 1){
    Out-LogFile -LogFilePath $LogFilePath -Value $Value -LogType 1 -LogEncoding $LogEncoding
  }
}
 
function Write-WarnLog([String]$VALUE){
  if($LogLevel -le 2){
    Out-LogFile -LogFilePath $LogFilePath -Value $Value -LogType 2 -LogEncoding $LogEncoding
  }
}
 
function Write-ErrorLog([String]$VALUE){
  if($LogLevel -le 3){
    Out-LogFile -LogFilePath $LogFilePath -Value $Value -LogType 3 -LogEncoding $LogEncoding
  }
}